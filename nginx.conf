# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

worker_rlimit_nofile 7192;
env VIA_URL;
env H_EMBED_URL;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # The AWS load balancer talks to the server via http so use the scheme the
    # client provided in the originating request via AWS's X-Forwarded-Proto 
    # header. If it does not exist, fallback to $scheme.

    map $http_x_forwarded_proto $original_scheme {
      "" $scheme;
      default $http_x_forwarded_proto;
    }

    resolver 8.8.8.8 ipv6=off;

    server {
      listen 9081;
      set $template_location /templates;
      merge_slashes off;

      location = /favicon.ico {
        return 204;
        access_log     off;
        log_not_found  off;
      }

      location /test/example.pdf {
        internal;
        access_by_lua_file ./lua/log_cookie_header.lua;
        proxy_pass http://www.pdf995.com/samples/pdf.pdf;
        add_header Set-Cookie "test=example-cookie"; 
      }

      location /test/restricted/example.pdf {
        internal;
        add_header Allow "GET" always;
        if ( $request_method !~ ^(GET)$ ) {
        	return 405;
        }
        proxy_pass http://www.pdf995.com/samples/pdf.pdf;
        add_header Set-Cookie "test=example-cookie"; 
      }

      location /_status {
        return 200;
        access_log off;
        add_header Content-Type text/html;
      }

      location ~ /id_/follow_redirect/(?<proxied_uri>.*) {
        set $upstream $proxied_uri$is_args$args;
        proxy_ssl_server_name on;
        proxy_pass $upstream;

        # Strip hypothesis cookies and authorization header.
        set $stripped_cookie $http_cookie;
    
        if ($stripped_cookie ~ "(.*)\s*auth=[^;]+;?(.*)") {
            set $stripped_cookie $1$2;
        }
        if ($stripped_cookie ~ "(.*)\s*session=[^;]+;?(.*)") {
            set $stripped_cookie $1$2;
        }
        proxy_set_header Cookie $stripped_cookie;
        proxy_set_header Authorization "";

        header_filter_by_lua_file ./lua/strip_response_cookies.lua;
        proxy_intercept_errors on;
        error_page 301 302 307 = @handle_redirect;
      }
  
      location @handle_redirect {
        set $upstream $upstream_http_location;
        proxy_ssl_server_name on;
        proxy_pass $upstream; 

        header_filter_by_lua_file ./lua/strip_response_cookies.lua;
        proxy_intercept_errors on;
        error_page 301 302 307 = @handle_redirect;
      }

      location ~ /html/(?<proxied_uri>.*) {
        # TODO: make this internal.
        set $upstream $proxied_uri$is_args$args;

        set_by_lua_file $hypothesis_header ./lua/html_embed_hypothesis.lua; 
        set_by_lua_file $proxied_upstream_domain ./lua/proxied_upstream_domain.lua; 

        # Proxy all hyperlinks on the page. 
        subs_filter '<a(.*) src="http'  '<a$1 src="$original_scheme://$http_host/id_/http';

        # Proxy stylesheets due to CORS mismatch.
        # If stylesheet href begins with http.
        subs_filter 'rel=[\'"]{1}stylesheet[\'"]{1}(.*) href=([\'"]{1})http'  'rel="stylesheet"$1 href=$2$original_scheme://$http_host/id_/http' r;
        # If stylesheet href begins with //.
        subs_filter 'rel=[\'"]{1}stylesheet[\'"]{1}(.*) href=([\'"]{1})//'  'rel="stylesheet"$1 href=$2$original_scheme://$http_host/id_/$original_scheme://' r;
        # If stylesheet href begins with /.
        subs_filter 'rel=[\'"]{1}stylesheet[\'"]{1}(.*) href=([\'"]{1})/'  'rel="stylesheet"$1 href=$2$original_scheme://$http_host/id_/$original_scheme://$proxied_upstream_domain/' r;
        # If stylesheet href begins with .. .
        subs_filter 'rel=[\'"]{1}stylesheet[\'"]{1}(.*) href=([\'"]{1})\.\.'  'rel="stylesheet"$1 href=$2$original_scheme://$http_host/id_/$proxied_uri..' r;
        # If stylesheet href is a relative path without the / or .. such as stylesheet-foo.css.
        subs_filter 'rel=[\'"]{1}stylesheet[\'"]{1}(.*) href=([\'"]{1})([^http\/\.]+)'  'rel="stylesheet"$1 href=$2$original_scheme://$http_host/id_/$original_scheme://$proxied_upstream_domain/$3' r;

        # Insert embeded Hypothesis client into header and add base tag so remaining
        # relative links are relative to the third party url.
        subs_filter '(<head>|<head [^>]*>)' '<base href="$proxied_uri">$1$hypothesis_header' r;

        sub_filter_once off;
        sub_filter_last_modified on;

        proxy_set_header Accept-Encoding ""; 
        proxy_ssl_server_name on;
        proxy_pass $upstream;
        proxy_redirect ~^(.*)$ $original_scheme://$http_host/html/$1; 

        # Strip hypothesis cookies and authorization header.
        set $stripped_cookie $http_cookie;
    
        if ($stripped_cookie ~ "(.*)\s*auth=[^;]+;?(.*)") {
            set $stripped_cookie $1$2;
        }
        if ($stripped_cookie ~ "(.*)\s*session=[^;]+;?(.*)") {
            set $stripped_cookie $1$2;
        }
        proxy_set_header Cookie $stripped_cookie;
        proxy_set_header Authorization "";

        header_filter_by_lua_file ./lua/strip_response_cookies.lua;
      }

      location ~ /id_/(?<proxied_uri>.*) {
        set $upstream $proxied_uri$is_args$args;
        proxy_ssl_server_name on;
        proxy_pass $upstream;
        proxy_redirect ~^(.*)$ $original_scheme://$http_host/id_/$1; 

        # Strip hypothesis cookies and authorization header.
        set $stripped_cookie $http_cookie;
    
        if ($stripped_cookie ~ "(.*)\s*auth=[^;]+;?(.*)") {
            set $stripped_cookie $1$2;
        }
        if ($stripped_cookie ~ "(.*)\s*session=[^;]+;?(.*)") {
            set $stripped_cookie $1$2;
        }
        proxy_set_header Cookie $stripped_cookie;
        proxy_set_header Authorization "";

        header_filter_by_lua_file ./lua/strip_response_cookies.lua;

      }
      location /pdf/ {
        internal;
        root html;
        default_type text/html;
        content_by_lua_file ./lua/pdf_embed_hypothesis.lua;
        add_header Content-Type text/html;
      }
      location / {
        access_by_lua_file ./lua/proxy_based_on_content_type.lua;
      }
      location /templates {
        internal;
        alias html/templates/;
      }
      location /static {
        access_log     off;
        alias static/;
      }
    }
}
